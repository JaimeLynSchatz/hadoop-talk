% Git Deep
% Jesse Keating and Adam Monsen
% April 22, 2012

# Intro

<!--
Conference: LinuxFest Northwest 2012
Target audience: git beginner to intermediate
-->

- What we'll cover
    - good stuff
- What we won't cover
    - bad stuff

# Credits

- Thank you, LFNW, thank you BLUG!

# What is git?

- Snapshot management
    - each "commit" is a snapshot of the tree instead of patches

- Distributed
    - Everybody gets a complete copy
    - Awesome for offline use
    - Awesome for contributors to collaborate

- Designed around multiple contributors
    - Tools to easily pass changes around
    - Differentiate between author, committer (and pusher, not recorded)

- Git is better than everything
    - <http://whygitisbetterthanx.com/>

# What is it used for?

- Upstream source management

- Distribution source management

- Config management

- Backups

- Cloud access

# What can't git do?

- effective contraception
    - actually...

# Getting Started (1/2)

- git init

- git status

- git add

- git commit
    - Commit styles
    - Teach your developers how to write [proper commit log messages](http://mifosforge.jira.com/wiki/display/MIFOS/Commit+Log+Guide).

- git log

# Getting Started (2/2)

- git show
    - git log -p

- git clone

- git diff

- git pull

- git tag
    - lightweight vs annotated
    - with gpg key

# Getting a Safety Net

- dry runs
    - not an oxymoron

- Obliterate
    - Yes, it can be done

- git checkout file

- git reset

- git reflog
    - recover an accidentally-dropped stash
    - <http://gitready.com/intermediate/2009/02/09/reflog-your-safety-net.html>
    - <http://gitready.com/advanced/2009/01/17/restoring-lost-commits.html>

# Getting along with other people (1/2)

- Sharing with bare repo
    - git clone --bare
    - naming conventions
    - no checked out files
    - push to bare
    - wtf is origin?

- Working from a branch
    - checkout -b
    - checkout master
    - diff master

- Creating patches
    - format-patch
    - git diff

# Getting along with other people (2/2)

- Applying patches
    - git apply
    - git am
    - signed-off-by
    - format-patch / am is better because context

- Sharing your changes
    - git send-email
    - pull requests

- Cherry picking

- Conflict resolution

# Getting Clever (1/2)

- git blame

- git stash

- interactive commit

- complex merges
    - When should you merge, when should you rebase?

- rebase
    - interactive
    - rebase to a branch
    - pull --rebase
    - odd name, very useful and easy

# Getting Clever (2/2)

- bisect
    - cut problem in half algorithm (simplified here)

- Interactive revert
    - <http://stackoverflow.com/a/2383361/156060>

# Getting efficient

- git-enhanced shell prompt

- command completion

- [set `core.autocrlf` appropriately!](http://help.github.com/line-endings/)

- use [snerk-util git scripts](https://github.com/meonkeys/snerk-util/tree/master/git) for operating on many git repositories at once
    - also consider submodules

- see handout for handy config settings

<div class="handout">
Paste these right into <code>~/.gitconfig</code>. See
<code>git-config(1)</code> manpage for details.
<pre>
# svn-like, plus shows diff in editor
alias.ci=commit -v

# great for avoiding unexpected merges
alias.pf=pull --ff-only

# useful for rebasing often
alias.pr=pull --rebase

# detailed log command I use often
alias.plog=log --decorate --find-copies-harder -c -C -M -p

# summary log command I use often
alias.slog=log --decorate --find-copies-harder -C -M --stat

# svn-like
alias.st=status

# provides handy visual cues
color.ui=auto

# only push upstream branch matching currently checked-out branch
push.default=upstream
</pre>
</div>

# Getting smart

- Read [Pro Git](http://progit.org)!
- Now. Do it now.

<center><a href="http://progit.org"><img src="http://progit.org/images/book-big.jpg" /></a></center>

# Getting agile

- [gollum](https://github.com/github/gollum) is a git-backed wiki
    - follow install (must use [older redcarpet](http://stackoverflow.com/a/8395471/156060))
    - create new git repo
    - run `gollum` from command line
    - hit <http://localhost:4567>



<!--
vim: ft=pandoc
-->
